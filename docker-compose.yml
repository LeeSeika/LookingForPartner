version: '3.5'

networks:
  looking-for-partner-backend:
    driver: ${NETWORKS_DRIVER}


services:
  nginx:
    build:
      context: ./docker/nginx
    environment:
      - TZ=${TZ}
    privileged: true
    volumes:
      - ${DATA_PATH_HOST}/nginx/conf/nginx.conf:/etc/nginx/nginx.conf
      - ${DATA_PATH_HOST}/nginx/html:/etc/nginx/html
      - ${DATA_PATH_HOST}/nginx/logs:/var/logs/nginx
    ports:
      - ${NGINX_PORT}:80
    depends_on:
      - golang
    networks:
      - looking-for-partner-backend

  golang:
    build: 
      context: ./docker/golang
    environment:
      - TZ=${TZ}
    privileged: true
    volumes:
      - ${CODE_PATH_HOST}:/home/src
      - ${TARGET_PATH_HOST}:/home/target
      - ${SCRIPTS_PATH_HOST}:/home/scripts
      - ${LOG_PATH_HOST}:/var/logs
    stdin_open: true
    tty: true
    networks:
      - looking-for-partner-backend

  etcd:
    build:
      context: ./docker/etcd
    environment:
      - TZ=${TZ}
      - ALLOW_NONE_AUTHENTICATION=yes
      - ETCD_ADVERTISE_CLIENT_URLS=http://etcd:2379
    ports:
      - "${ETCD_PORT}:2379"
    networks:
      - looking-for-partner-backend

  mysql:
    build:
      context: ./docker/mysql
    environment:
      - TZ=${TZ}
      - MYSQL_USER=${MYSQL_USERNAME}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
    privileged: true
    volumes:
      - ${DATA_PATH_HOST}/mysql:/var/lib/mysql
      - ${SCRIPTS_PATH_HOST}/sql:/docker-entrypoint-initdb.d
    ports:
      - "${MYSQL_PORT}:3306"
    networks:
      - looking-for-partner-backend

  redis:
    build:
      context: ./docker/redis
    environment:
      - TZ=${TZ}
    privileged: true
    volumes:
      - ${DATA_PATH_HOST}/redis:/data
    ports:
      - "${REDIS_PORT}:6379"
    networks:
      - looking-for-partner-backend

  mysql-manage:
    build:
      context: ./docker/mysql-manage
    environment:
      - TZ=${TZ}
      - PMA_ARBITRARY=1
      - MYSQL_USER=${MYSQL_MANAGE_USERNAME}
      - MYSQL_PASSWORD=${MYSQL_MANAGE_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MYSQL_MANAGE_ROOT_PASSWORD}
      - PMA_HOST=${MYSQL_MANAGE_CONNECT_HOST}
      - PMA_PORT=${MYSQL_MANAGE_CONNECT_PORT}
    ports:
      - "${MYSQL_MANAGE_PORT}:80"
    depends_on:
      - mysql
    networks:
      - looking-for-partner-backend

  redis-manage:
    build:
      context: ./docker/redis-manage
    environment:
      - TZ=${TZ}
      - ADMIN_USER=${REDIS_MANAGE_USERNAME}
      - ADMIN_PASS=${REDIS_MANAGE_PASSWORD}
      - REDIS_1_HOST=${REDIS_MANAGE_CONNECT_HOST}
      - REDIS_1_PORT=${REDIS_MANAGE_CONNECT_PORT}
    ports:
      - "${REDIS_MANAGE_PORT}:80"
    depends_on:
      - redis
    networks:
      - looking-for-partner-backend

  etcd-manage:
    build:
      context: ./docker/etcd-manage
    environment:
      - TZ=${TZ}
    ports:
      - "${ETCD_MANAGE_PORT}:8080"
    depends_on:
      - etcd
    networks:
      - looking-for-partner-backend

  prometheus:
    build:
      context: ./docker/prometheus
    environment:
      - TZ=${TZ}
    privileged: true
    volumes:
      - ./docker/prometheus/prometheus.yml:/opt/bitnami/prometheus/conf/prometheus.yml
    ports:
      - "${PROMETHEUS_PORT}:9090"
    networks:
      - looking-for-partner-backend

  grafana:
    build:
      context: ./docker/grafana
    environment:
      - TZ=${TZ}
    ports:
      - "${GRAFANA_PORT}:3000"
    networks:
      - looking-for-partner-backend

  jaeger:
    build:
      context: ./docker/jaeger
    environment:
      - TZ=${TZ}
    ports:
      - "${JAEGER_PORT}:16686"
    networks:
      - looking-for-partner-backend

  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "${ZOOKEEPER_PORT}:2181"
    networks:
      - looking-for-partner-backend
  
  kafka:
    image: wurstmeister/kafka
    ports:
      - "${KAFKA_PORT}:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: ${KAFKA_ADVERTISED_HOST_NAME}
      KAFKA_LOG_DIRS: ${KAFKA_LOG_DIR}
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "TRUE"
    volumes:
      - ${DATA_PATH_HOST}/kafka:/kafka
    depends_on:
      - zookeeper
    networks:
      - looking-for-partner-backend

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - ${KAFKA_UI_PORT}:8080
    environment:
      DYNAMIC_CONFIG_ENABLED: "TRUE"
    depends_on:
      - kafka
    networks:
      - looking-for-partner-backend
