// Code generated by goctl. DO NOT EDIT.
// Source: post.proto

package server

import (
	"context"

	"lookingforpartner/pb/post"
	"lookingforpartner/service/post/rpc/internal/logic"
	"lookingforpartner/service/post/rpc/internal/svc"
)

type PostServer struct {
	svcCtx *svc.ServiceContext
	post.UnimplementedPostServer
}

func NewPostServer(svcCtx *svc.ServiceContext) *PostServer {
	return &PostServer{
		svcCtx: svcCtx,
	}
}

func (s *PostServer) CreatePost(ctx context.Context, in *post.CreatePostRequest) (*post.CreatePostResponse, error) {
	l := logic.NewCreatePostLogic(ctx, s.svcCtx)
	return l.CreatePost(in)
}

func (s *PostServer) DeletePost(ctx context.Context, in *post.DeletePostRequest) (*post.DeletePostResponse, error) {
	l := logic.NewDeletePostLogic(ctx, s.svcCtx)
	return l.DeletePost(in)
}

func (s *PostServer) GetPost(ctx context.Context, in *post.GetPostRequest) (*post.GetPostResponse, error) {
	l := logic.NewGetPostLogic(ctx, s.svcCtx)
	return l.GetPost(in)
}

func (s *PostServer) GetPosts(ctx context.Context, in *post.GetPostsRequest) (*post.GetPostsResponse, error) {
	l := logic.NewGetPostsLogic(ctx, s.svcCtx)
	return l.GetPosts(in)
}

func (s *PostServer) GetPostsByAuthorID(ctx context.Context, in *post.GetPostsByAuthorIDRequest) (*post.GetPostsByAuthorIDResponse, error) {
	l := logic.NewGetPostsByAuthorIDLogic(ctx, s.svcCtx)
	return l.GetPostsByAuthorID(in)
}

func (s *PostServer) UpdateProject(ctx context.Context, in *post.UpdateProjectRequest) (*post.UpdateProjectResponse, error) {
	l := logic.NewUpdateProjectLogic(ctx, s.svcCtx)
	return l.UpdateProject(in)
}
